<?php

/** This is a @file */

include_once('feeds_article.features.inc');


function feeds_article_menu() {

  $items = array();

  $items['admin/rescore'] = array(
    'page callback' => 'feeds_article_rescore_wrapper',
    'access arguments' => array('administer nodes'),
  );

  return $items;

}


function feeds_article_node_presave($node) {

  if ($node->log == 'Created by FeedsNodeProcessor')
//   if ($node->type == 'article')
    feeds_article_score($node);

}


function feeds_article_score($node) {

// check relevance

  $allowed_tags = explode(' ',
    'em strong cite blockquote code ul ol li dl dt dd p br big h2');

  $weightings = array(

    'Beauty' => array(
      'acne' => 3,
      'beauty' => 3,
      'chic' => 3,
      'cosmetic' => 3,
      'cosmetics' => 3,
      'cute' => 3,
      'cuteness' => 3,
      'lips' => 3,
      'makeup' => 3,
      'pimples' => 3,
      'sex' => 2,
      'skin' => 2,

      'badass' => -100,
      'damn' => -100,
      'f---' => -100,
      'f*ck' => -100,
      'wtf' => -100,

    ),

    'Health' => array(
      'clean' => 3,
      'cough' => 3,
      'diet' => 3,
      'diarrhea' => 3,
      'disease' => 3,
      'health' => 3,
      'healthiest' => 3,
      'healthy' => 3,
      'hospital' => 3,
      'hospitals' => 3,
      'nutrition' => 3,
      'oxygen' => 2,
      'pregnant' => 3,
      'pregnancy' => 3,
      'sex' => 2,
      'skin' => 2,
      'sick' => 3,
      'sickness' => 3,
      'weight' => 3,

      'badass' => -100,
      'damn' => -100,
      'f---' => -100,
      'f*ck' => -100,
      'wtf' => -100,

    ),

    'Fitness' => array(
      'active' => 2,
      'athlete' => 2,
      'barbell' => 3,
      'barbells' => 3,
      'class' => 1,
      'classes' => 1,
      'dumbbell' => 3,
      'dumbbells' => 3,
      'exercise' => 3,
      'exercises' => 3,
      'fitness' => 3,
      'gym' => 3,
      'kickbox' => 3,
      'kickboxer' => 3,
      'kickboxing' => 3,
      'muscle' => 3,
      'plank' => 3,
      'run' => 2,
      'running' => 3,
      'shape' => 1,
      'self-defense' => 3,
      'sex' => 2,
      'sport' => 3,
      'strengthening' => 3,
      'stretch' => 3,
      'stretching' => 3,
      'swim' => 3,
      'swimming' => 3,
      'tennis' => 3,
      'testosterone' => 3,
      'weight' => 2,
      'weights' => 3,
      'workout' => 3,
      'workouts' => 3,
      'work out' => 3,
      'working out' => 3,
      'yoga' => 3,
      'zumba' => 3,

      'badass' => -100,
      'damn' => -100,
      'f---' => -100,
      'f*ck' => -100,
      'wtf' => -100,

    ),

    'Sex and Relationships' => array(
      'sex' => 3,
      'bondage' => 2,
      'boob' => 2,
      'boyfriend' => 3,
      'climax' => 2,
      'date' => 3,
      'dildo' => 3,
      'dildos' => 3,
      'engaged' => 3,
      'girlfriend' => 3,
      'love' => 3,
      'loved' => 3,
      'loves' => 3,
      'marry' => 3,
      'marriage' => 3,
      'married' => 3,
      'masturbating' => 3,
      'masturbation' => 3,
      'naked' => 3,
      'nude' => 3,
      'orgasm' => 3,
      'orgasming' => 3,
      'orgasms' => 3,
      'porn' => 3,
      'porno' => 3,
      'pornography' => 3,
      'relationship' => 3,
      'relationships' => 3,
      'sexual' => 3,
      'sexy' => 2,
      'vibrator' => 3,
      'vibrators' => 3,
      'virgin' => 3,
      'virginity' => 3,

      'badass' => -100,
      'damn' => -100,
      'f---' => -100,
      'f*ck' => -100,
      'wtf' => -100,

    ),

  );

  $text_only = filter_xss(
    decode_entities(
      $node->field_imported_description[LANGUAGE_NONE][0]['value']
    ),
    array()
  );

  $title_text_only = filter_xss(
    decode_entities(
      $node->field_imported_title[LANGUAGE_NONE][0]['value']
    ),
    array()
  );

// generate score for each section based on term ranking

  $scores = array();
  $log = '';

  foreach ($weightings as $section => $weighting) {

    $scores[$section] = 0;
    $log_terms = '';

    foreach ($weighting as $term => $weight) {

// title matches
      $matches = array();
      preg_match_all('/\b' . $term . '\b/i', $title_text_only, $matches,
        PREG_OFFSET_CAPTURE);
      $num_matches = sizeof($matches[0]);

      if ($num_matches > 0) {

        $extra_weight = $num_matches * $weight * 3;
        $scores[$section] += $extra_weight;
        $log_terms .= $extra_weight . ': ' . $term . ' (title)';

        ($num_matches > 1) && $log_terms .= ' x ' . $num_matches;

        $log_terms .= "\n";

      } // any matches?

// body matches
      $matches = array();
      preg_match_all('/\b' . $term . '\b/i', $text_only, $matches,
        PREG_OFFSET_CAPTURE);
      $num_matches = sizeof($matches[0]);

      if ($num_matches > 0) {

        $extra_weight = $num_matches * $weight;
        $scores[$section] += $extra_weight;
        $log_terms .= $extra_weight . ': ' . $term;

        ($num_matches > 1) && $log_terms .= ' x ' . $num_matches;

        $log_terms .= "\n";

      } // any matches?

    } // foreach term

    $log .= 'Section ' . $section . ' (score: ' . $scores[$section] . ")\n"
    . $log_terms . "\n";

  } // foreach section

  $log .= "Raw text\n------------\n\n" . $text_only;

  $node->field_relevance_log = array(
    LANGUAGE_NONE => array(
      0 => array(
        'value' => $log,
      ),
    ),
  );

// save highest relevance

  $relevance = 0;
  $relevance_section = '';

  foreach ($scores as $section => $score) {

    if ($score > $relevance) {

      $relevance = $score;
      $relevance_section = $section;

    }

  }

  $node->field_highest_relevance = array(
    LANGUAGE_NONE => array(
      0 => array(
        'value' => $relevance,
      ),
    ),
  );

  $node->field_highest_relevance_section = array(
    LANGUAGE_NONE => array(
      0 => array(
        'value' => $relevance_section,
      ),
    ),
  );

  $relevance_decay = (int) ((time() - $node->field_imported_published_date
    [LANGUAGE_NONE][0]['value']) / 3600);
  $score = $relevance - $relevance_decay;

  $node->field_score = array(
    LANGUAGE_NONE => array(
      0 => array(
        'value' => $score,
      ),
    ),
  );

// save section

  $section_tids = array_values(
    taxonomy_get_term_by_name($relevance_section, 'sections')
  );

  if (count($section_tids) > 0) {

    $node->field_section = array(
      LANGUAGE_NONE => array(
        0 => array(
          'tid' => $section_tids[0]->tid,
        ),
      ),
    );
  }


// save URL

  $node->field_more_info_link = $node->field_imported_url;


// save title

  $node->title = filter_xss($node->title, array());

// save body

  $node->body = array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => filter_xss(
             $node->field_imported_description[LANGUAGE_NONE][0]['value'],
             $allowed_tags),
          'format' => 'limited_html',
        ),
      ),
    );

// publish or promote?

  $node->status = ($score > 10) ? 1 : 0;
  $node->promote = ($score > 20) ? 1 : 0;

//     dpm($node, $node->title);

}


function feeds_article_cron() {

  return feeds_article_rescore();

}


function feeds_article_rescore() {

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'article')
    ->fieldCondition('field_imported_published_date', 'value', time() - 345600,
      '>')
    ->addMetaData('account', user_load(1)); // Run the query as user 1.

  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $articles = entity_load('node', $nids);

    drupal_set_message(
      t('%num nodes are still alive.', array('%num' => count($nids)))
    );

    foreach ($articles as $node) {

      feeds_article_score($node);
      node_save($node);

    }

  } else {

    drupal_set_message(t('No nodes are still alive.'));

  }

}


function feeds_article_rescore_wrapper() {

  feeds_article_rescore();
  drupal_set_message('Article rescore completed.');
  return 'Article rescore completed.';

}
